===============================================
üöÄ HOMELAB-SHV PRE-DEPLOYMENT CHECKLIST
===============================================
Complete ALL items before running docker compose up -d
Last Updated: October 11, 2025

===============================================
üìã SYSTEM REQUIREMENTS
===============================================
Hardware:
‚ñ° CPU: 4+ cores (8+ recommended for transcoding)
‚ñ° RAM: 8GB minimum (16GB+ recommended)
‚ñ° Storage: 500GB+ available space
‚ñ° Network: Gigabit Ethernet recommended

Operating System:
‚ñ° Ubuntu 20.04+ LTS or Debian 11+
‚ñ° Root/sudo access available
‚ñ° SSH access configured (for remote management)

===============================================
üì¶ SOFTWARE INSTALLATION
===============================================
Run these commands on your server:

# Update system
sudo apt update && sudo apt upgrade -y

# Install Docker
curl -fsSL https://get.docker.com | sh
sudo usermod -aG docker $USER
sudo systemctl enable docker

# Install Docker Compose
sudo apt install docker-compose-plugin

# Install dependencies
sudo apt install git curl rsync htop nano

# Verify installations
docker --version
docker compose version
git --version

Verification Checklist:
‚ñ° Docker installed and running
‚ñ° Docker Compose plugin installed
‚ñ° Git installed
‚ñ° User added to docker group (logout/login required)

===============================================
üîß DIRECTORY SETUP
===============================================
Run the bootstrap script:

cd /path/to/homelab-deployment/deployment
chmod +x bootstrap.sh
sudo ./bootstrap.sh

Manual verification:
‚ñ° /data directory exists
‚ñ° /data/docker subdirectories created
‚ñ° /data/media subdirectories created
‚ñ° Permissions set to 1000:1000
‚ñ° Bootstrap script completed successfully

===============================================
üîë VPN CONFIGURATION (CRITICAL!)
===============================================
You MUST have a VPN provider account:
‚ñ° VPN provider account active (ProtonVPN, NordVPN, etc.)
‚ñ° WireGuard credentials obtained from provider
‚ñ° VPN tested and working

Required VPN information:
- Private Key: ____________________________
- Public Key: _____________________________
- Server Endpoint: ________________________
- Allowed IPs: ____________________________

Files to configure:
‚ñ° deployment/wg0.conf created from template
‚ñ° VPN credentials added to wg0.conf
‚ñ° VPN configuration tested

===============================================
üìù CONFIGURATION FILES
===============================================
Copy templates:
cp deployment/.env.example deployment/.env
cp deployment/wg0.conf.example deployment/wg0.conf

Edit configuration files:
‚ñ° .env file created from template
‚ñ° All "your_*_here" placeholders replaced
‚ñ° Database passwords set (create strong passwords)
‚ñ° Timezone configured (TZ=)
‚ñ° PUID/PGID configured (usually 1000)

Required .env variables to configure:
‚ñ° VPN_SERVICE_PROVIDER=
‚ñ° WIREGUARD_PUBLIC_KEY=
‚ñ° WIREGUARD_PRIVATE_KEY=
‚ñ° DB_PASS= (create strong password)
‚ñ° JWT_SECRET= (create random string)
‚ñ° TZ= (your timezone)

===============================================
üåê NETWORK CONFIGURATION
===============================================
Required ports (must be available):
‚ñ° 8096 - Jellyfin Media Server
‚ñ° 8989 - Sonarr (TV Shows)
‚ñ° 7878 - Radarr (Movies)
‚ñ° 9696 - Prowlarr (Indexers)
‚ñ° 5055 - Jellyseerr (Requests)
‚ñ° 8080 - qBittorrent (Downloads via VPN)
‚ñ° 3000 - Jellystat (Analytics)

Firewall configuration:
sudo ufw allow 8096
sudo ufw allow 8989
sudo ufw allow 7878
sudo ufw allow 9696
sudo ufw allow 5055

Network verification:
‚ñ° All required ports available
‚ñ° No port conflicts with existing services
‚ñ° Firewall configured
‚ñ° /dev/net/tun device exists

===============================================
ÔøΩ LXC INFRASTRUCTURE SERVICES (Optional)
===============================================
If using Proxmox with LXC containers:

LXC Network Planning (VMID-to-IP Correlation):
‚ñ° 192.168.1.201 - VMID 201 - Nginx Proxy Manager (reverse proxy + SSL)
‚ñ° 192.168.1.202 - VMID 202 - Tailscale (VPN subnet router)
‚ñ° 192.168.1.203 - VMID 203 - Ntfy (notification server)
‚ñ° 192.168.1.204 - VMID 204 - Media File Share (Samba)
‚ñ° 192.168.1.205 - VMID 205 - Pi-hole (DNS & ad blocking)
‚ñ° 192.168.1.206 - VMID 206 - Vaultwarden (password management)
‚ñ° 192.168.1.204 - Media File Share (media sharing)
‚ñ° 192.168.1.205 - Pi-hole (DNS + ad blocking)
‚ñ° 192.168.1.206 - Vaultwarden (password manager)

Deploy LXC services:
# After cloning repository on Proxmox host
./homelab.sh lxc

Individual LXC deployments:
‚ñ° Nginx Proxy Manager: ./lxc/nginx-proxy-manager/setup_npm_lxc.sh
‚ñ° Tailscale Router: ./lxc/tailscale/setup_tailscale_lxc.sh  
‚ñ° Ntfy Notifications: ./lxc/ntfy/setup_ntfy_lxc.sh
‚ñ° Media File Share: ./lxc/samba/setup_samba_lxc.sh
‚ñ° Pi-hole DNS/Ad Blocker: ./lxc/pihole/setup_pihole_lxc.sh
‚ñ° Vaultwarden Password Manager: ./lxc/vaultwarden/setup_vaultwarden_lxc.sh

LXC Benefits:
- Better resource isolation than Docker
- Dedicated IP addresses for services
- Separate network segments
- Independent system updates
- Enhanced security boundaries

===============================================
ÔøΩüîí SECURITY CHECKLIST
===============================================
Before deployment:
‚ñ° Strong unique passwords in .env file
‚ñ° VPN credentials tested and working
‚ñ° SSH key authentication configured
‚ñ° Firewall properly configured
‚ñ° Only necessary ports exposed

Password Requirements:
- DB_PASS: Minimum 16 characters, complex
- JWT_SECRET: Random 32+ character string
- Admin passwords: Unique for each service

===============================================
‚úÖ PRE-DEPLOYMENT VALIDATION
===============================================
Run these commands to verify setup:

# Check configuration syntax
docker compose -f deployment/docker-compose.yml config

# Verify no placeholder values remain
grep -n "changeme\|your_.*_here\|replace_me" deployment/.env

# Check VPN configuration
grep -E "(PrivateKey|PublicKey|Endpoint)" deployment/wg0.conf

# Verify directory permissions
ls -la /data/

Validation checklist:
‚ñ° Docker compose config validates without errors
‚ñ° No placeholder values in .env file
‚ñ° VPN configuration complete
‚ñ° Directory permissions correct (1000:1000)
‚ñ° All required files exist

===============================================
üöÄ DEPLOYMENT COMMANDS
===============================================
Only run when ALL above items are complete:

# Deploy the stack
cd /path/to/homelab-deployment
docker compose -f deployment/docker-compose.yml up -d

# Check service status
docker compose -f deployment/docker-compose.yml ps

# View logs if needed
docker compose -f deployment/docker-compose.yml logs -f

===============================================
üì± POST-DEPLOYMENT SETUP REQUIRED
===============================================
After successful deployment, configure:

1. Prowlarr (http://your-ip:9696)
   - Add indexers (torrent/usenet sites)
   - Configure categories

2. Sonarr (http://your-ip:8989)
   - Add root folder: /data/media/shows
   - Connect to Prowlarr
   - Add download client (qBittorrent)

3. Radarr (http://your-ip:7878)
   - Add root folder: /data/media/movies
   - Connect to Prowlarr
   - Add download client (qBittorrent)

4. qBittorrent (http://your-ip:8080)
   - Default login: admin/adminadmin (CHANGE IMMEDIATELY)
   - Verify VPN IP address (should show VPN location)
   - Configure download paths

5. Jellyfin (http://your-ip:8096)
   - Run setup wizard
   - Add media libraries
   - Create user accounts

6. Jellyseerr (http://your-ip:5055)
   - Connect to Jellyfin
   - Connect to Sonarr/Radarr
   - Configure permissions

===============================================
‚ö†Ô∏è CRITICAL WARNINGS
===============================================
- VPN IS MANDATORY: Stack won't work without proper VPN setup
- NEVER skip VPN testing: Your ISP will see torrent traffic
- Port conflicts: Ensure no other services use required ports
- Storage space: Ensure adequate space in /data directory
- Backup strategy: Plan backups before adding content
- Legal compliance: Only download content you own or is legal

===============================================
üÜò TROUBLESHOOTING
===============================================
Common issues:

Container won't start:
- Check logs: docker logs <container_name>
- Verify .env file has no placeholders
- Check port conflicts: netstat -tulpn

VPN not working:
- Verify wg0.conf credentials
- Check VPN provider status
- Test connectivity: docker exec gluetun curl ifconfig.me

Permission errors:
- Ensure /data owned by 1000:1000
- Check container user mappings (PUID/PGID)

Service can't connect:
- Verify all containers in same network
- Check internal container IPs
- Review docker-compose.yml network config

===============================================
üìû SUPPORT RESOURCES
===============================================
- Repository: https://github.com/J35867U/homelab-SHV
- Documentation: /docs directory in repository
- Troubleshooting: deployment/TROUBLESHOOTING.md
- Issues: GitHub Issues section

===============================================
‚úÖ DEPLOYMENT COMPLETION CHECKLIST
===============================================
Mark when complete:
‚ñ° All containers started successfully
‚ñ° VPN working (qBittorrent shows VPN IP)
‚ñ° Jellyfin accessible and configured
‚ñ° Sonarr/Radarr connected to Prowlarr
‚ñ° Download test completed successfully
‚ñ° All web interfaces accessible
‚ñ° Backup strategy implemented

Deployment Date: _______________
VPN IP Address: _______________
External IP Address: ___________

===============================================
üéâ CONGRATULATIONS!
===============================================
Your Homelab-SHV is now deployed and ready to use!

Remember to:
- Regularly update containers
- Monitor disk space
- Backup configurations
- Keep VPN credentials secure
- Follow legal guidelines for content

Enjoy your self-hosted media server!
===============================================