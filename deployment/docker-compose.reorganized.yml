# =====================================================
# üê≥ Homelab ‚Äî Reorganized Docker Compose File
# =====================================================
# Based on TechHut's Proxmox Homelab Series Structure
# Maintainer: J35867U
# Last Updated: 2025-10-15
# 
# Organized Servarr + Jellyfin + Automation Stack
# Following best practices for media server deployment
# =====================================================

networks:
  homelab:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

services:
  # =====================================================
  # üîí VPN & NETWORKING LAYER
  # =====================================================
  # VPN Gateway - All download traffic routes through this
  gluetun:
    image: qmcgaw/gluetun:latest
    container_name: gluetun
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun:/dev/net/tun
    ports:
      - "8080:8080"   # qBittorrent WebUI
      - "6881:6881"   # qBittorrent P2P
      - "6881:6881/udp"
      - "6789:6789"   # NZBGet WebUI
    volumes:
      - ./wg0.conf:/gluetun/wireguard/wg0.conf:ro
    env_file:
      - .env
    networks:
      homelab:
        ipv4_address: 172.20.0.5
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8000/v1/openvpn/status"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-3}

  # FlareSolverr - Cloudflare bypass utility
  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    environment:
      - LOG_LEVEL=${LOG_LEVEL_FLARESOLVERR:-info}
      - TZ=${TZ}
    ports:
      - "8191:8191"
    networks:
      homelab:
        ipv4_address: 172.20.0.9
    restart: unless-stopped

  # =====================================================
  # üì• DOWNLOAD CLIENTS LAYER
  # =====================================================
  # Torrent client - Routes through VPN
  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - WEBUI_PORT=8080
    volumes:
      - /data/docker/qbittorrent:/config
      - /data/media/downloads:/downloads
    network_mode: "service:gluetun"  # Routes through VPN
    depends_on:
      - gluetun
    restart: unless-stopped

  # Usenet client - Routes through VPN
  nzbget:
    image: lscr.io/linuxserver/nzbget:latest
    container_name: nzbget
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /data/docker/nzbget:/config
      - /data/media/downloads:/downloads
    network_mode: "service:gluetun"  # Routes through VPN
    depends_on:
      - gluetun
    restart: unless-stopped

  # =====================================================
  # üé¨ MEDIA MANAGEMENT LAYER (SERVARR STACK)
  # =====================================================
  # Indexer management - Central hub for all indexers
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /data/docker/prowlarr:/config
    ports:
      - "9696:9696"
    networks:
      homelab:
        ipv4_address: 172.20.0.10
    restart: unless-stopped

  # TV Shows automation
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /data/docker/sonarr:/config
      - /data/media:/data/media
      - /data/media/downloads:/downloads
      - /data/media/shows:/shows
    ports:
      - "8989:8989"
    networks:
      homelab:
        ipv4_address: 172.20.0.11
    depends_on:
      - prowlarr
    restart: unless-stopped

  # Movies automation
  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /data/docker/radarr:/config
      - /data/media:/data/media
      - /data/media/movies:/movies
      - /data/media/downloads:/downloads
    ports:
      - "7878:7878"
    networks:
      homelab:
        ipv4_address: 172.20.0.12
    depends_on:
      - prowlarr
    restart: unless-stopped

  # Subtitles automation
  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /data/docker/bazarr:/config
      - /data/media:/data/media
      - /data/media/movies:/movies
      - /data/media/shows:/shows
    ports:
      - "6767:6767"
    networks:
      homelab:
        ipv4_address: 172.20.0.13
    depends_on:
      - sonarr
      - radarr
    restart: unless-stopped

  # Quality profile management
  recyclarr:
    image: ghcr.io/recyclarr/recyclarr:latest
    container_name: recyclarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /data/docker/recyclarr:/config
    networks:
      homelab:
        ipv4_address: 172.20.0.14
    depends_on:
      - sonarr
      - radarr
    restart: unless-stopped

  # =====================================================
  # üé• MEDIA SERVER LAYER
  # =====================================================
  # Main media server
  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - JELLYFIN_PublishedServerUrl=${JELLYFIN_PUBLISHED_SERVER_URL:-http://localhost:8096}
    volumes:
      - /data/docker/jellyfin:/config
      - /data/media:/data/media
      - /dev/shm:/data/transcode  # RAM disk for transcoding
    ports:
      - "8096:8096"   # Main web interface
      - "8920:8920"   # HTTPS
      - "7359:7359/udp"  # Auto-discovery
      - "1900:1900/udp"  # Service discovery
    devices:
      - /dev/dri:/dev/dri  # Intel QuickSync hardware acceleration - REMOVE if no Intel GPU
    group_add:
      - "${RENDER_GROUP_ID}"  # render group for hardware acceleration - REMOVE if no Intel GPU
    # NOTE: For systems without Intel GPU, comment out the devices and group_add sections above
    networks:
      homelab:
        ipv4_address: 172.20.0.20
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8096/health"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-3}
    restart: unless-stopped

  # =====================================================
  # üìä ANALYTICS & MONITORING LAYER  
  # =====================================================
  # Jellyfin analytics database
  jellystat-db:
    image: postgres:15
    container_name: jellystat-db
    environment:
      - POSTGRES_DB=jfstat
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
    volumes:
      - /data/docker/jellystat-db:/var/lib/postgresql/data
    networks:
      homelab:
        ipv4_address: 172.20.0.25
    restart: unless-stopped

  # Jellyfin analytics interface
  jellystat:
    image: cyfershepard/jellystat:latest
    container_name: jellystat
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_IP=jellystat-db
      - POSTGRES_PORT=5432
      - JWT_SECRET=${JWT_SECRET}
      - TZ=${TZ}
    ports:
      - "3000:3000"
    volumes:
      - /data/docker/jellystat/backup-data:/app/backend/backup-data
    depends_on:
      - jellystat-db
      - jellyfin
    networks:
      homelab:
        ipv4_address: 172.20.0.26
    restart: unless-stopped

  # =====================================================
  # üéØ REQUEST & USER MANAGEMENT LAYER
  # =====================================================
  # Media requests interface
  jellyseerr:
    image: fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    environment:
      - LOG_LEVEL=${LOG_LEVEL_JELLYSEERR:-debug}
      - TZ=${TZ}
    volumes:
      - /data/docker/jellyseerr:/app/config
    ports:
      - "5055:5055"
    networks:
      homelab:
        ipv4_address: 172.20.0.30
    depends_on:
      - jellyfin
      - sonarr
      - radarr
    restart: unless-stopped

  # User invitation management
  wizarr:
    container_name: wizarr
    image: ghcr.io/wizarrrr/wizarr
    ports:
      - "5690:5690"
    volumes:
      - /data/docker/wizarr:/data
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - DISABLE_BUILTIN_AUTH=false
      - TZ=${TZ}
    networks:
      homelab:
        ipv4_address: 172.20.0.31
    depends_on:
      - jellyfin
    restart: unless-stopped

  # =====================================================
  # üîÑ AUTOMATION & ENHANCEMENT LAYER
  # =====================================================
  # YouTube content downloader
  ytdl-sub:
    image: jmbannon/ytdl-sub:latest
    container_name: ytdl-sub
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /data/docker/ytdl-sub:/config
      - /data/media/youtube:/media
    networks:
      homelab:
        ipv4_address: 172.20.0.35
    restart: unless-stopped

  # YouTube automation integration
  jellyfin-youtube-automation:
    image: python:3.11-slim
    container_name: jellyfin-youtube-automation
    environment:
      - TZ=${TZ}
    volumes:
      - ./automation/jellyfin-youtube:/app
      - /data/media/youtube:/data/youtube
    working_dir: /app
    command: ["python", "-u", "smart_incremental_updater.py"]
    networks:
      homelab:
        ipv4_address: 172.20.0.36
    depends_on:
      - jellyfin
      - ytdl-sub
    restart: unless-stopped

  # Channel/playlist management
  tunarr:
    image: chrisbenincasa/tunarr:latest
    container_name: tunarr
    environment:
      - TZ=${TZ}
    volumes:
      - /data/docker/tunarr:/config/tunarr
      - /data/media:/media
    ports:
      - "${TUNARR_SERVER_PORT:-8000}:8000"
    networks:
      homelab:
        ipv4_address: 172.20.0.37
    depends_on:
      - jellyfin
    restart: unless-stopped

  # Content suggestions and recommendations
  suggestarr:
    image: ghcr.io/l3uddz/suggestarr:latest
    container_name: suggestarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /data/docker/suggestarr:/config
    ports:
      - "${SUGGESTARR_PORT:-5000}:5000"
    networks:
      homelab:
        ipv4_address: 172.20.0.32
    depends_on:
      - sonarr
      - radarr
      - jellyfin
    restart: unless-stopped