#!/bin/bash
# =====================================================
# 🎮 Game Server Documentation Archiver
# =====================================================
# Archives game server documentation, configs, and metadata
# Maintainer: J35867U
# Email: mrnash404@protonmail.com
# Last Updated: 2025-10-14
# =====================================================

set -e

# Configuration
GAME_SERVER_REPO="https://github.com/J35867U/game-server.git"
GAME_SERVER_REPO_SSH="git@github.com:J35867U/game-server.git"
GAME_SERVER_BRANCH="main"
SERVER_NAME="game-server"
ADMIN_EMAIL="mrnash404@protonmail.com"
ARCHIVE_DIR="/data/backups/game-server-docs"
LOGFILE="/var/log/game-server/docs_archive.log"
DATE=$(date '+%Y-%m-%d_%H-%M-%S')
ARCHIVE_NAME="game-server-docs-${DATE}"

# NTFY Configuration (separate from homelab)
NTFY_SERVER=${NTFY_SERVER:-"https://ntfy.sh"}
NTFY_TOPIC_GAMESERVER=${NTFY_TOPIC_GAMESERVER:-"game-server-standalone"}

# Create directories
mkdir -p "$ARCHIVE_DIR"
mkdir -p "$(dirname "$LOGFILE")"

# Function to log messages
log_message() {
    echo "[$DATE] $1" | tee -a "$LOGFILE"
}

log_message "🎮 Starting game server documentation archive"

# Create temporary directory for archive
TEMP_DIR=$(mktemp -d)
ARCHIVE_PATH="$TEMP_DIR/$ARCHIVE_NAME"

log_message "📁 Creating archive directory at $ARCHIVE_PATH"
mkdir -p "$ARCHIVE_PATH"

# Clone or update game server repository
log_message "📥 Fetching latest game server repository..."
REPO_DIR="$TEMP_DIR/game-server-repo"

# Try HTTPS first (public repo), fallback to SSH, then local files
if git clone --depth 1 --branch "$GAME_SERVER_BRANCH" "$GAME_SERVER_REPO" "$REPO_DIR"; then
    log_message "✅ Repository cloned successfully via HTTPS"
elif git clone --depth 1 --branch "$GAME_SERVER_BRANCH" "$GAME_SERVER_REPO_SSH" "$REPO_DIR" 2>/dev/null; then
    log_message "✅ Repository cloned successfully via SSH"
else
    log_message "⚠️ Failed to clone repository, creating archive from local files only"
    mkdir -p "$REPO_DIR"
    
    # If running on the game server itself, copy local setup script
    if [ -f "/root/setup.sh" ] || [ -f "/home/*/setup.sh" ] || [ -f "./setup.sh" ]; then
        find /root /home /opt -name "setup.sh" -type f 2>/dev/null | head -1 | xargs -I {} cp {} "$REPO_DIR/" 2>/dev/null || true
        log_message "ℹ️ Found local setup script, using for archive"
    fi
fi

# Copy core documentation and scripts
log_message "📄 Copying game server files..."

# Copy main files from the repository
for file in setup.sh status.sh README.md CHANGELOG.md TROUBLESHOOTING.md LICENSE; do
    if [ -f "$REPO_DIR/$file" ]; then
        cp "$REPO_DIR/$file" "$ARCHIVE_PATH/"
        log_message "✅ Copied $file"
    fi
done

# Copy directories from the repository
for dir in scripts game-servers configs docs; do
    if [ -d "$REPO_DIR/$dir" ]; then
        cp -r "$REPO_DIR/$dir" "$ARCHIVE_PATH/"
        log_message "✅ Copied $dir directory"
    fi
done

# Copy example configurations (sanitized)
log_message "🔧 Copying configuration templates..."
mkdir -p "$ARCHIVE_PATH/config-examples"

# Create example configurations based on the setup script
cat > "$ARCHIVE_PATH/config-examples/sunshine.conf.example" << 'EOF'
# Sunshine Configuration - Game Server Example
# Generated by Game Server Documentation Archiver

# Server identification
sunshine_name = game-server-HOSTNAME
min_log_level = info

# Network settings
address_family = both
port = 47984
upnp = disabled

# Video settings (CPU-optimized)
encoder = software
sw_preset = veryfast
sw_tune = zerolatency
fps = [30, 60]
resolutions = [
    858x480,
    1280x720,
    1920x1080
]

# CPU encoding optimization
threads = 0
preset = veryfast
tune = zerolatency
crf = 23

# Audio settings
audio_sink = auto
virtual_sink = sunshine

# Input settings
gamepad = auto

# Application definitions
apps = [
    {
        name = "Desktop",
        output = "",
        cmd = "",
        image-path = ""
    },
    {
        name = "CoinOps",
        output = "",
        cmd = "/opt/coinops/coinops",
        image-path = ""
    },
    {
        name = "RetroArch",
        output = "",
        cmd = "retroarch",
        image-path = ""
    }
]
EOF

# Create systemd service examples
cat > "$ARCHIVE_PATH/config-examples/sunshine.service.example" << 'EOF'
[Unit]
Description=Sunshine GameStream Server
Wants=graphical-session.target
After=graphical-session.target

[Service]
Type=simple
User=gameuser
Group=gameuser
Environment=HOME=/home/gameuser
Environment=DISPLAY=:0
ExecStart=/usr/bin/sunshine
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

cat > "$ARCHIVE_PATH/config-examples/coinops-web.service.example" << 'EOF'
[Unit]
Description=CoinOps Web Interface
After=network.target

[Service]
Type=simple
User=gameuser
WorkingDirectory=/home/gameuser/coinops-web
Environment=COINOPS_PORT=8080
Environment=MOONLIGHT_PORT=47984
ExecStart=/usr/bin/node server.js
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

log_message "✅ Configuration examples created"

# Extract system information from current game server (if running locally)
log_message "🖥️ Gathering system information..."
SYSTEM_INFO_DIR="$ARCHIVE_PATH/system-info"
mkdir -p "$SYSTEM_INFO_DIR"

# Check if we're running on a game server
if systemctl list-units --all | grep -q "sunshine\|coinops"; then
    log_message "📊 Detected local game server installation"
    
    # Gather service status
    for service in sunshine coinops-web x11-server openbox; do
        if systemctl list-units --all | grep -q "$service"; then
            systemctl status "$service" --no-pager > "$SYSTEM_INFO_DIR/${service}_status.txt" 2>/dev/null || true
            log_message "✅ Captured $service status"
        fi
    done
    
    # Gather network information
    ss -tulpn | grep -E "(47984|8080)" > "$SYSTEM_INFO_DIR/network_ports.txt" 2>/dev/null || true
    
    # Gather hardware information relevant to gaming
    lscpu > "$SYSTEM_INFO_DIR/cpu_info.txt" 2>/dev/null || true
    free -h > "$SYSTEM_INFO_DIR/memory_info.txt" 2>/dev/null || true
    lspci | grep -i "vga\|display\|graphics" > "$SYSTEM_INFO_DIR/graphics_info.txt" 2>/dev/null || true
    
    # Check for GPU acceleration
    vainfo > "$SYSTEM_INFO_DIR/vaapi_info.txt" 2>/dev/null || echo "VAAPI not available" > "$SYSTEM_INFO_DIR/vaapi_info.txt"
    
    log_message "✅ System information captured"
else
    log_message "ℹ️ No local game server detected, creating reference documentation only"
fi

# Create archive manifest
log_message "📋 Creating archive manifest..."
MANIFEST_FILE="$ARCHIVE_PATH/ARCHIVE_MANIFEST.txt"

cat > "$MANIFEST_FILE" << EOF
# Game Server Documentation Archive
# Generated: $(date)
# Server: $SERVER_NAME
# Maintainer: $ADMIN_EMAIL
# Repository: $GAME_SERVER_REPO
# Branch: $GAME_SERVER_BRANCH

## Archive Purpose
This archive contains documentation, configuration examples, and system information
for the Game Server (Moonlight GameStream + CoinOps Emulation platform).

## Archive Contents
$(find "$ARCHIVE_PATH" -type f | sed "s|$ARCHIVE_PATH/||" | sort)

## System Information
- Archive Host: $(hostname)
- OS: $(lsb_release -d 2>/dev/null | cut -f2 || echo "Unknown")
- Kernel: $(uname -r)
- Docker Version: $(docker --version 2>/dev/null || echo "Not available")
- Archive Date: $(date)
- Archive Size: $(du -sh "$ARCHIVE_PATH" | cut -f1)

## Git Repository Information
Repository URL: $GAME_SERVER_REPO
Branch: $GAME_SERVER_BRANCH
Latest Commits:
$(cd "$REPO_DIR" && git log --oneline -5 2>/dev/null || echo "No git history available")

## Services Status (if detected locally)
$(if systemctl list-units --all | grep -q "sunshine\|coinops"; then
    echo "Local game server detected:"
    for service in sunshine coinops-web x11-server openbox; do
        if systemctl list-units --all | grep -q "$service"; then
            echo "- $service: $(systemctl is-active "$service" 2>/dev/null || echo "unknown")"
        fi
    done
else
    echo "No local game server installation detected"
fi)

## Hardware Information (if available)
$(if [ -f "$SYSTEM_INFO_DIR/cpu_info.txt" ]; then
    echo "CPU: $(grep "model name" "$SYSTEM_INFO_DIR/cpu_info.txt" | head -1 | cut -d: -f2 | sed 's/^ *//')"
    echo "Memory: $(grep "MemTotal" /proc/meminfo 2>/dev/null | awk '{print $2/1024/1024 " GB"}' || echo "Unknown")"
    echo "Graphics: $(head -1 "$SYSTEM_INFO_DIR/graphics_info.txt" 2>/dev/null || echo "Unknown")"
fi)

## Configuration Examples Included
- Sunshine GameStream server configuration
- Systemd service definitions
- Network and firewall settings
- Web interface setup

## Related Documentation
This archive should be used alongside:
- Game Server main documentation
- Network configuration documentation
- Backup and monitoring procedures

EOF

log_message "✅ Archive manifest created"

# Create deployment guide
log_message "📖 Creating deployment guide..."
cat > "$ARCHIVE_PATH/DEPLOYMENT_GUIDE.md" << 'EOF'
# 🎮 Game Server Deployment Guide

## Overview
This guide covers deploying the Game Server (Moonlight GameStream + CoinOps) following homelab-SHV architecture patterns.

## Prerequisites
- Ubuntu 22.04 LTS server
- Minimum 8GB RAM (16GB recommended)
- Network access to homelab infrastructure
- Integration with existing monitoring/backup systems

## Quick Deployment
```bash
# Download and run setup script
wget https://raw.githubusercontent.com/J35867U/game-server/main/setup.sh
chmod +x setup.sh
sudo ./setup.sh
```

## Service Architecture
- **Sunshine**: Moonlight GameStream server (Port 47984-47990)
- **CoinOps Web**: Management interface (Port 8080)
- **RetroArch**: Multi-system emulator
- **X11 Server**: Virtual display for headless operation

## Integration Points

### Monitoring
- Prometheus metrics: `http://server:9090/metrics`
- Service status: `systemctl status sunshine coinops-web`
- Log monitoring: `journalctl -u sunshine -f`

### Networking
- Firewall: UFW configured for required ports
- Tailscale: Ready for VPN integration
- Local access: Web interface on port 8080

### Backup Integration
- ROMs directory: `/opt/coinops/roms/`
- Saves directory: `/opt/coinops/saves/`
- Configs: `/home/gameuser/.config/`

### Security
- Dedicated user: `gameuser`
- Firewall configured
- SSH key authentication recommended
- Integration with homelab security policies

## Post-Deployment Steps
1. Add ROM files to `/opt/coinops/roms/`
2. Configure Tailscale for secure remote access
3. Integrate with homelab monitoring (Grafana/Prometheus)
4. Set up automated backups
5. Test Moonlight streaming from client devices

## Client Setup
1. Install Moonlight client on target device
2. Add server IP address
3. Pair using PIN from web interface
4. Start streaming!

## Troubleshooting
- Check service status: `systemctl status sunshine coinops-web`
- View logs: `journalctl -u sunshine -f`
- Test hardware acceleration: `vainfo`
- Network connectivity: `ss -tulpn | grep -E "(47984|8080)"`

## Integration with Homelab-SHV
This game server is designed to integrate with the main homelab infrastructure:
- Uses same monitoring patterns (ntfy notifications)
- Follows same backup strategies
- Compatible with existing network architecture
- Shares security and maintenance procedures
EOF

log_message "✅ Deployment guide created"

# Create compressed archive
log_message "🗜️ Creating compressed archive..."
cd "$TEMP_DIR"
ARCHIVE_FILE="$ARCHIVE_DIR/${ARCHIVE_NAME}.tar.gz"

if tar -czf "$ARCHIVE_FILE" "$ARCHIVE_NAME"; then
    log_message "✅ Compressed archive created: $ARCHIVE_FILE"
    ARCHIVE_SIZE=$(du -sh "$ARCHIVE_FILE" | cut -f1)
    log_message "📊 Archive size: $ARCHIVE_SIZE"
else
    log_message "❌ Failed to create compressed archive"
    exit 1
fi

# Encrypt archive if GPG is available
if command -v gpg >/dev/null 2>&1; then
    log_message "🔒 Encrypting archive with GPG..."
    
    # Use admin email as recipient if GPG key exists
    if gpg --list-keys "$ADMIN_EMAIL" >/dev/null 2>&1; then
        ENCRYPTED_FILE="${ARCHIVE_FILE}.gpg"
        if gpg --trust-model always --encrypt --recipient "$ADMIN_EMAIL" --output "$ENCRYPTED_FILE" "$ARCHIVE_FILE"; then
            log_message "✅ Archive encrypted: $ENCRYPTED_FILE"
        else
            log_message "⚠️ Encryption failed, keeping unencrypted archive"
        fi
    else
        log_message "⚠️ No GPG key found for $ADMIN_EMAIL, skipping encryption"
    fi
else
    log_message "ℹ️ GPG not available, archive not encrypted"
fi

# Cleanup old archives (keep last 30 days)
log_message "🧹 Cleaning up old archives..."
OLD_ARCHIVES=$(find "$ARCHIVE_DIR" -name "game-server-docs-*.tar.gz*" -mtime +30 2>/dev/null || true)
if [ -n "$OLD_ARCHIVES" ]; then
    echo "$OLD_ARCHIVES" | xargs rm -f
    OLD_COUNT=$(echo "$OLD_ARCHIVES" | wc -l)
    log_message "🗑️ Removed $OLD_COUNT old archives"
else
    log_message "ℹ️ No old archives to remove"
fi

# Create symlink to latest
log_message "🔗 Creating symlink to latest archive..."
cd "$ARCHIVE_DIR"
ln -sf "$(basename "$ARCHIVE_FILE")" "game-server-docs-latest.tar.gz"

if [ -f "${ARCHIVE_FILE}.gpg" ]; then
    ln -sf "$(basename "${ARCHIVE_FILE}.gpg")" "game-server-docs-latest.tar.gz.gpg"
fi

# Generate archive summary
TOTAL_FILES=$(find "$ARCHIVE_PATH" -type f | wc -l)
TOTAL_DIRS=$(find "$ARCHIVE_PATH" -type d | wc -l)

# Cleanup temporary directory
rm -rf "$TEMP_DIR"

log_message "📊 Archive summary:"
log_message "   - Files archived: $TOTAL_FILES"
log_message "   - Directories: $TOTAL_DIRS"
log_message "   - Archive size: $ARCHIVE_SIZE"
log_message "   - Location: $ARCHIVE_FILE"

# Send notification if configured
send_ntfy() {
    local title="$1"
    local message="$2"
    local priority="${3:-default}"
    local tags="${4:-gaming,backup,books}"
    
    if [ -n "$NTFY_SERVER" ] && [ -n "$NTFY_TOPIC_GAMESERVER" ]; then
        curl -s \
            -H "Title: [Game Server] $title" \
            -H "Priority: $priority" \
            -H "Tags: $tags" \
            -d "$message" \
            "$NTFY_SERVER/$NTFY_TOPIC_GAMESERVER" || true
    fi
}

if [ -n "$NTFY_SERVER" ] && [ -n "$NTFY_TOPIC_GAMESERVER" ]; then
    NOTIFICATION="🎮 Game Server Documentation Archive Complete

✅ Successfully archived game server documentation

📊 Archive Details:
• Files: $TOTAL_FILES
• Size: $ARCHIVE_SIZE
• Location: $ARCHIVE_DIR
• Repository: $GAME_SERVER_REPO
• Encrypted: $([ -f "${ARCHIVE_FILE}.gpg" ] && echo "Yes" || echo "No")

🗓️ Archive Date: $(date +'%Y-%m-%d %H:%M')
📅 Next Archive: $(date -d '+1 day' +'%Y-%m-%d')"

    send_ntfy "Documentation Archived" "$NOTIFICATION"
fi

log_message "✅ Game server documentation archive completed successfully"
echo "Game server documentation archive completed: $ARCHIVE_FILE"
echo ""
echo "🎮 Archive includes:"
echo "   • Game server repository content"
echo "   • Configuration examples and templates"
echo "   • System information and service status"
echo "   • Deployment guide and integration instructions"
echo "   • Hardware acceleration information"
echo ""
echo "📁 Archive location: $ARCHIVE_FILE"
echo "🔗 Latest symlink: $ARCHIVE_DIR/game-server-docs-latest.tar.gz"