#!/bin/bash
# =====================================================
# 🎮 Game Server Standalone Deployment Script
# =====================================================
# One-click deployment for complete game server management
# Maintainer: J35867U
# Email: mrnash404@protonmail.com
# Last Updated: 2025-10-14
# =====================================================

set -e

# Configuration
INSTALL_DIR="/opt/game-server-tools"
BIN_DIR="/usr/local/bin"
LOG_DIR="/var/log/game-server"
BACKUP_DIR="/data/backups/game-server"
CONFIG_DIR="/etc/game-server"
SERVICE_DIR="/etc/systemd/system"

SERVER_NAME="game-server"
ADMIN_EMAIL="mrnash404@protonmail.com"
SCRIPT_VERSION="1.0.0"

# NTFY Configuration (will be set during installation)
NTFY_SERVER="https://ntfy.sh"
NTFY_TOPIC_GAMESERVER="game-server-standalone"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m'

# Logging
LOGFILE="$LOG_DIR/deployment.log"

# Ensure running as root
if [ "$EUID" -ne 0 ]; then
    echo -e "${RED}❌ This script must be run as root${NC}"
    echo "Please run: sudo $0"
    exit 1
fi

# Function to log messages
log_message() {
    mkdir -p "$(dirname "$LOGFILE")"
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOGFILE"
}

# Function to print step headers
print_step() {
    echo -e "\n${BLUE}══════════════════════════════════════════════════════${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}══════════════════════════════════════════════════════${NC}"
    log_message "STEP: $1"
}

# Function to check prerequisites
check_prerequisites() {
    print_step "🔍 CHECKING PREREQUISITES"
    
    # Check if we're on Ubuntu/Debian
    if ! command -v apt >/dev/null 2>&1; then
        echo -e "${RED}❌ This script is designed for Ubuntu/Debian systems${NC}"
        exit 1
    fi
    
    # Check internet connectivity
    if ! ping -c 1 8.8.8.8 >/dev/null 2>&1; then
        echo -e "${RED}❌ No internet connectivity${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}✅ Prerequisites met${NC}"
}

# Function to install dependencies
install_dependencies() {
    print_step "📦 INSTALLING DEPENDENCIES"
    
    # Update package list
    apt update
    
    # Install required packages
    apt install -y \
        curl \
        wget \
        git \
        bc \
        jq \
        unzip \
        tar \
        gzip \
        cron \
        systemd \
        nodejs \
        npm \
        gpg \
        lm-sensors \
        htop \
        netstat-ss \
        lsb-release
    
    echo -e "${GREEN}✅ Dependencies installed${NC}"
}

# Function to create directories
create_directories() {
    print_step "📁 CREATING DIRECTORY STRUCTURE"
    
    # Create main directories
    mkdir -p "$INSTALL_DIR"/{scripts,docs,config}
    mkdir -p "$LOG_DIR"
    mkdir -p "$BACKUP_DIR"/{daily,weekly,monthly}
    mkdir -p "$CONFIG_DIR"
    
    # Set permissions
    chown -R root:root "$INSTALL_DIR"
    chmod -R 755 "$INSTALL_DIR"
    
    # Create gameuser if it doesn't exist
    if ! id gameuser >/dev/null 2>&1; then
        useradd -m -s /bin/bash gameuser
        usermod -aG sudo gameuser
        log_message "Created gameuser account"
    fi
    
    echo -e "${GREEN}✅ Directory structure created${NC}"
}

# Function to install monitoring script
install_monitoring() {
    print_step "📊 INSTALLING MONITORING DASHBOARD"
    
    cat > "$INSTALL_DIR/scripts/monitoring.sh" << 'EOF'
#!/bin/bash
# Game Server Monitoring Dashboard - Embedded Version
# Auto-generated by standalone deployment

set -e

# Configuration
SERVER_NAME="game-server"
ADMIN_EMAIL="mrnash404@protonmail.com"
LOGFILE="/var/log/game-server/monitoring.log"
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')

# NTFY Configuration
NTFY_SERVER=${NTFY_SERVER:-"https://ntfy.sh"}
NTFY_TOPIC_GAMESERVER=${NTFY_TOPIC_GAMESERVER:-"game-server-standalone"}

# Thresholds
CPU_THRESHOLD=80
MEMORY_THRESHOLD=80
DISK_THRESHOLD=85

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Create directories
mkdir -p "$(dirname "$LOGFILE")"

# Function to log messages
log_message() {
    echo "[$TIMESTAMP] $1" | tee -a "$LOGFILE"
}

# Function to send NTFY notifications
send_ntfy() {
    local title="$1"
    local message="$2"
    local priority="${3:-default}"
    
    if [ -n "$NTFY_SERVER" ] && [ -n "$NTFY_TOPIC_GAMESERVER" ]; then
        curl -s \
            -H "Title: [Game Server] $title" \
            -H "Priority: $priority" \
            -H "Tags: gaming,monitoring" \
            -d "$message" \
            "$NTFY_SERVER/$NTFY_TOPIC_GAMESERVER" || true
    fi
}

# Quick system check
echo -e "${BLUE}🎮 Game Server Quick Monitor${NC}"
echo "Time: $(date)"
echo ""

# CPU Usage
CPU_USAGE=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1 | tr -d ' ')
echo -e "CPU Usage: ${CPU_USAGE}%"

# Memory Usage
MEM_INFO=$(free | grep Mem)
MEM_TOTAL=$(echo $MEM_INFO | awk '{print $2}')
MEM_USED=$(echo $MEM_INFO | awk '{print $3}')
MEM_USAGE=$(echo "scale=1; $MEM_USED * 100 / $MEM_TOTAL" | bc)
echo -e "Memory Usage: ${MEM_USAGE}%"

# Service Status
echo ""
echo -e "${BLUE}Service Status:${NC}"
for service in sunshine coinops-web; do
    if systemctl is-active "$service" >/dev/null 2>&1; then
        echo -e "$service: ${GREEN}ACTIVE${NC}"
    else
        echo -e "$service: ${RED}INACTIVE${NC}"
    fi
done

# Check for alerts
ALERTS=()
if (( $(echo "$CPU_USAGE > $CPU_THRESHOLD" | bc -l) )); then
    ALERTS+=("High CPU usage: ${CPU_USAGE}%")
fi

MEM_USAGE_INT=${MEM_USAGE%.*}
if [ "$MEM_USAGE_INT" -gt "$MEMORY_THRESHOLD" ]; then
    ALERTS+=("High memory usage: ${MEM_USAGE}%")
fi

if [ ${#ALERTS[@]} -gt 0 ]; then
    echo ""
    echo -e "${RED}⚠️ Alerts:${NC}"
    for alert in "${ALERTS[@]}"; do
        echo -e "${RED}• $alert${NC}"
        log_message "ALERT: $alert"
    done
    
    # Send notification
    ALERT_MESSAGE="🚨 Game Server Alert

$(printf '%s\n' "${ALERTS[@]}")

Time: $(date)
Server: $(hostname)"

    send_ntfy "System Alert" "$ALERT_MESSAGE" "high"
fi

log_message "Monitoring check completed"
EOF

    chmod +x "$INSTALL_DIR/scripts/monitoring.sh"
    echo -e "${GREEN}✅ Monitoring dashboard installed${NC}"
}

# Function to install backup system
install_backup() {
    print_step "💾 INSTALLING BACKUP SYSTEM"
    
    cat > "$INSTALL_DIR/scripts/backup.sh" << 'EOF'
#!/bin/bash
# Game Server Backup System - Embedded Version
# Auto-generated by standalone deployment

set -e

# Configuration
BACKUP_BASE_DIR="/data/backups/game-server"
LOGFILE="/var/log/game-server/backup.log"
DATE=$(date '+%Y-%m-%d_%H-%M-%S')

# Directories to backup
ROM_DIR="/opt/coinops/roms"
SAVES_DIR="/opt/coinops/saves"
CONFIG_DIR="/home/gameuser/.config"

# Create directories
mkdir -p "$BACKUP_BASE_DIR"/{daily,weekly,monthly}
mkdir -p "$(dirname "$LOGFILE")"

# Function to log messages
log_message() {
    echo "[$DATE] $1" | tee -a "$LOGFILE"
}

log_message "Starting backup: ${1:-daily}"

# Create backup
BACKUP_NAME="game-server-${1:-daily}-$DATE"
TEMP_DIR=$(mktemp -d)
BACKUP_PATH="$TEMP_DIR/$BACKUP_NAME"

mkdir -p "$BACKUP_PATH"

# Backup ROM files if they exist
if [ -d "$ROM_DIR" ]; then
    log_message "Backing up ROMs..."
    mkdir -p "$BACKUP_PATH/roms"
    tar -czf "$BACKUP_PATH/roms/roms.tar.gz" -C "$(dirname "$ROM_DIR")" "$(basename "$ROM_DIR")" 2>/dev/null || true
fi

# Backup save games if they exist
if [ -d "$SAVES_DIR" ]; then
    log_message "Backing up saves..."
    mkdir -p "$BACKUP_PATH/saves"
    tar -czf "$BACKUP_PATH/saves/saves.tar.gz" -C "$(dirname "$SAVES_DIR")" "$(basename "$SAVES_DIR")" 2>/dev/null || true
fi

# Backup configurations if they exist
if [ -d "$CONFIG_DIR" ]; then
    log_message "Backing up configs..."
    mkdir -p "$BACKUP_PATH/configs"
    tar -czf "$BACKUP_PATH/configs/configs.tar.gz" -C "$(dirname "$CONFIG_DIR")" "$(basename "$CONFIG_DIR")" 2>/dev/null || true
fi

# Create manifest
cat > "$BACKUP_PATH/MANIFEST.txt" << EOL
Game Server Backup
Generated: $(date)
Server: $(hostname)
Type: ${1:-daily}
Contents: ROMs, Saves, Configurations
EOL

# Create final archive
FINAL_PATH="$BACKUP_BASE_DIR/${1:-daily}/${BACKUP_NAME}.tar.gz"
cd "$TEMP_DIR"
tar -czf "$FINAL_PATH" "$BACKUP_NAME"

# Cleanup
rm -rf "$TEMP_DIR"

log_message "Backup completed: $FINAL_PATH"
echo "Backup completed: $FINAL_PATH"
EOF

    chmod +x "$INSTALL_DIR/scripts/backup.sh"
    echo -e "${GREEN}✅ Backup system installed${NC}"
}

# Function to install status checker
install_status() {
    print_step "🔍 INSTALLING STATUS CHECKER"
    
    cat > "$INSTALL_DIR/scripts/status.sh" << 'EOF'
#!/bin/bash
# Game Server Status Checker - Embedded Version
# Auto-generated by standalone deployment

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}🎮 Game Server Status Check${NC}"
echo "Time: $(date)"
echo "Server: $(hostname)"
echo ""

# System Resources
echo -e "${BLUE}System Resources:${NC}"
CPU_USAGE=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1 | tr -d ' ')
echo "  CPU Usage: ${CPU_USAGE}%"

MEM_INFO=$(free | grep Mem)
MEM_TOTAL=$(echo $MEM_INFO | awk '{print $2}')
MEM_USED=$(echo $MEM_INFO | awk '{print $3}')
MEM_USAGE=$(echo "scale=1; $MEM_USED * 100 / $MEM_TOTAL" | bc)
echo "  Memory Usage: ${MEM_USAGE}%"

DISK_USAGE=$(df / | tail -1 | awk '{print $5}')
echo "  Disk Usage: $DISK_USAGE"

# Services
echo ""
echo -e "${BLUE}Services:${NC}"
for service in sunshine coinops-web x11-server; do
    if systemctl list-units --all | grep -q "$service"; then
        STATUS=$(systemctl is-active "$service" 2>/dev/null || echo "unknown")
        case "$STATUS" in
            "active")
                echo -e "  $service: ${GREEN}✓ ACTIVE${NC}"
                ;;
            *)
                echo -e "  $service: ${RED}✗ $STATUS${NC}"
                ;;
        esac
    else
        echo -e "  $service: ${YELLOW}⚠ NOT INSTALLED${NC}"
    fi
done

# Network
echo ""
echo -e "${BLUE}Network:${NC}"
if ss -tulpn | grep -q ":47984 "; then
    echo -e "  Sunshine Port: ${GREEN}✓ LISTENING${NC}"
else
    echo -e "  Sunshine Port: ${RED}✗ NOT LISTENING${NC}"
fi

if ss -tulpn | grep -q ":8080 "; then
    echo -e "  Web Interface: ${GREEN}✓ LISTENING${NC}"
else
    echo -e "  Web Interface: ${RED}✗ NOT LISTENING${NC}"
fi

# Directories
echo ""
echo -e "${BLUE}Game Directories:${NC}"
for dir in "/opt/coinops/roms" "/opt/coinops/saves" "/home/gameuser/.config"; do
    if [ -d "$dir" ]; then
        FILE_COUNT=$(find "$dir" -type f 2>/dev/null | wc -l)
        echo -e "  $(basename "$dir"): ${GREEN}✓ EXISTS${NC} ($FILE_COUNT files)"
    else
        echo -e "  $(basename "$dir"): ${YELLOW}⚠ MISSING${NC}"
    fi
done

echo ""
echo -e "${GREEN}✅ Status check completed${NC}"
EOF

    chmod +x "$INSTALL_DIR/scripts/status.sh"
    echo -e "${GREEN}✅ Status checker installed${NC}"
}

# Function to install enhanced web interface
install_web_interface() {
    print_step "🌐 INSTALLING ENHANCED WEB INTERFACE"
    
    # Create package.json for Node.js dependencies
    cat > "$INSTALL_DIR/package.json" << 'EOF'
{
  "name": "game-server-web-interface",
  "version": "1.0.0",
  "description": "Enhanced web interface for game server management",
  "main": "enhanced-web.js",
  "scripts": {
    "start": "node enhanced-web.js",
    "test": "echo \"No tests specified\" && exit 0"
  },
  "dependencies": {
    "express": "^4.18.2"
  },
  "author": "J35867U",
  "license": "MIT"
}
EOF

    # Install Node.js dependencies
    cd "$INSTALL_DIR"
    npm install --production
    
    # Create simplified web interface
    cat > "$INSTALL_DIR/enhanced-web.js" << 'EOF'
#!/usr/bin/env node
/**
 * Enhanced Game Server Web Interface - Embedded Version
 * Auto-generated by standalone deployment
 */

const http = require('http');
const { exec } = require('child_process');

const PORT = process.env.COINOPS_PORT || 8080;
const HOST = process.env.COINOPS_HOST || '0.0.0.0';

// Simple metrics storage
const metrics = {
    startTime: new Date(),
    requests: 0
};

// Simple dashboard HTML
const generateDashboard = () => `<!DOCTYPE html>
<html>
<head>
    <title>🎮 Game Server Dashboard</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
        .container { max-width: 800px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; }
        .header { text-align: center; color: #333; margin-bottom: 30px; }
        .card { background: #f8f9fa; padding: 15px; margin: 10px 0; border-radius: 5px; border-left: 4px solid #007bff; }
        .btn { display: inline-block; padding: 10px 20px; margin: 5px; background: #007bff; color: white; text-decoration: none; border-radius: 5px; }
        .btn:hover { background: #0056b3; }
        .status { font-weight: bold; }
        .status.active { color: #28a745; }
        .status.inactive { color: #dc3545; }
    </style>
    <script>
        setTimeout(() => location.reload(), 30000); // Auto-refresh every 30 seconds
    </script>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🎮 Game Server Dashboard</h1>
            <p>Moonlight GameStream + CoinOps Emulation Platform</p>
        </div>
        
        <div class="card">
            <h3>📊 Server Information</h3>
            <p>Server: ${require('os').hostname()}</p>
            <p>Uptime: ${Math.floor((Date.now() - metrics.startTime) / 1000)} seconds</p>
            <p>Requests: ${metrics.requests}</p>
            <p>Time: ${new Date().toLocaleString()}</p>
        </div>
        
        <div class="card">
            <h3>🎮 Quick Actions</h3>
            <a href="/api/status" class="btn">📡 API Status</a>
            <a href="/metrics" class="btn">📊 Metrics</a>
            <a href="javascript:location.reload()" class="btn">🔄 Refresh</a>
        </div>
        
        <div class="card">
            <h3>ℹ️ Information</h3>
            <p>This is a simplified web interface for the game server.</p>
            <p>For full functionality, install the complete game server setup.</p>
            <p>Maintainer: mrnash404@protonmail.com</p>
        </div>
    </div>
</body>
</html>`;

// HTTP server
const server = http.createServer((req, res) => {
    metrics.requests++;
    
    const url = new URL(req.url, `http://${req.headers.host}`);
    
    if (url.pathname === '/') {
        res.setHeader('Content-Type', 'text/html');
        res.end(generateDashboard());
    } else if (url.pathname === '/api/status') {
        res.setHeader('Content-Type', 'application/json');
        res.end(JSON.stringify({
            status: 'ok',
            uptime: Math.floor((Date.now() - metrics.startTime) / 1000),
            timestamp: new Date().toISOString()
        }));
    } else if (url.pathname === '/metrics') {
        res.setHeader('Content-Type', 'text/plain');
        res.end(`# Game Server Metrics
gameserver_uptime_seconds ${Math.floor((Date.now() - metrics.startTime) / 1000)}
gameserver_requests_total ${metrics.requests}
`);
    } else {
        res.statusCode = 404;
        res.end('Not Found');
    }
});

server.listen(PORT, HOST, () => {
    console.log(`🎮 Game Server Web Interface running at http://${HOST}:${PORT}`);
});
EOF

    chmod +x "$INSTALL_DIR/enhanced-web.js"
    echo -e "${GREEN}✅ Enhanced web interface installed${NC}"
}

# Function to create main command
create_main_command() {
    print_step "🔧 CREATING MAIN COMMAND"
    
    cat > "$BIN_DIR/game-server" << 'EOF'
#!/bin/bash
# Game Server Management Command
# Auto-generated by standalone deployment

INSTALL_DIR="/opt/game-server-tools"

case "${1:-help}" in
    "monitor"|"monitoring"|"mon")
        exec "$INSTALL_DIR/scripts/monitoring.sh" "${@:2}"
        ;;
    "backup"|"bak")
        exec "$INSTALL_DIR/scripts/backup.sh" "${@:2}"
        ;;
    "status"|"stat")
        exec "$INSTALL_DIR/scripts/status.sh" "${@:2}"
        ;;
    "web"|"interface"|"start-web")
        cd "$INSTALL_DIR"
        exec node enhanced-web.js
        ;;
    "help"|"-h"|"--help")
        echo "🎮 Game Server Management Tool"
        echo ""
        echo "Usage: game-server [COMMAND]"
        echo ""
        echo "Commands:"
        echo "  monitor     Run monitoring dashboard"
        echo "  backup      Create backup (daily/weekly/monthly)"
        echo "  status      Check system status"
        echo "  web         Start web interface"
        echo "  help        Show this help message"
        echo ""
        echo "Examples:"
        echo "  game-server status"
        echo "  game-server backup daily"
        echo "  game-server monitor"
        echo ""
        ;;
    *)
        echo "Unknown command: $1"
        echo "Use 'game-server help' for usage information"
        exit 1
        ;;
esac
EOF

    chmod +x "$BIN_DIR/game-server"
    echo -e "${GREEN}✅ Main command created: game-server${NC}"
}

# Function to create systemd services
create_systemd_services() {
    print_step "⚙️ CREATING SYSTEMD SERVICES"
    
    # Web interface service
    cat > "$SERVICE_DIR/game-server-web.service" << EOF
[Unit]
Description=Game Server Web Interface
After=network.target

[Service]
Type=simple
User=gameuser
WorkingDirectory=$INSTALL_DIR
Environment=NODE_ENV=production
Environment=COINOPS_PORT=8080
ExecStart=/usr/bin/node enhanced-web.js
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

    # Monitoring timer
    cat > "$SERVICE_DIR/game-server-monitor.timer" << EOF
[Unit]
Description=Game Server Monitoring Timer
Requires=game-server-monitor.service

[Timer]
OnCalendar=*:0/15
Persistent=true

[Install]
WantedBy=timers.target
EOF

    # Monitoring service
    cat > "$SERVICE_DIR/game-server-monitor.service" << EOF
[Unit]
Description=Game Server Monitoring Check
After=network.target

[Service]
Type=oneshot
ExecStart=$INSTALL_DIR/scripts/monitoring.sh
User=root
EOF

    # Reload systemd
    systemctl daemon-reload
    
    echo -e "${GREEN}✅ Systemd services created${NC}"
}

# Function to setup cron jobs
setup_cron_jobs() {
    print_step "⏰ SETTING UP AUTOMATED TASKS"
    
    # Create cron jobs for backups
    cat > /etc/cron.d/game-server << EOF
# Game Server Automated Tasks

# Daily backup at 2 AM
0 2 * * * root $INSTALL_DIR/scripts/backup.sh daily >/dev/null 2>&1

# Weekly backup on Sunday at 3 AM
0 3 * * 0 root $INSTALL_DIR/scripts/backup.sh weekly >/dev/null 2>&1

# Monthly backup on 1st at 4 AM
0 4 1 * * root $INSTALL_DIR/scripts/backup.sh monthly >/dev/null 2>&1

# Daily status check at 8 AM
0 8 * * * root $INSTALL_DIR/scripts/status.sh >/dev/null 2>&1
EOF

    echo -e "${GREEN}✅ Automated tasks configured${NC}"
}

# Function to create configuration
create_configuration() {
    print_step "⚙️ CREATING CONFIGURATION"
    
    cat > "$CONFIG_DIR/game-server.conf" << EOF
# Game Server Configuration
# Auto-generated by standalone deployment

[server]
name = $SERVER_NAME
admin_email = $ADMIN_EMAIL
version = $SCRIPT_VERSION

[ntfy]
server = $NTFY_SERVER
topic = $NTFY_TOPIC_GAMESERVER

[paths]
install_dir = $INSTALL_DIR
log_dir = $LOG_DIR
backup_dir = $BACKUP_DIR

[web]
port = 8080
host = 0.0.0.0

[monitoring]
cpu_threshold = 80
memory_threshold = 80
disk_threshold = 85

[backup]
retention_daily = 7
retention_weekly = 4
retention_monthly = 3
EOF

    echo -e "${GREEN}✅ Configuration created${NC}"
}

# Function to test installation
test_installation() {
    print_step "🧪 TESTING INSTALLATION"
    
    # Test main command
    if game-server help >/dev/null 2>&1; then
        echo -e "${GREEN}✅ Main command works${NC}"
    else
        echo -e "${RED}❌ Main command failed${NC}"
    fi
    
    # Test individual scripts
    for script in monitoring.sh backup.sh status.sh; do
        if [ -x "$INSTALL_DIR/scripts/$script" ]; then
            echo -e "${GREEN}✅ $script executable${NC}"
        else
            echo -e "${RED}❌ $script not executable${NC}"
        fi
    done
    
    # Test Node.js web interface
    if [ -f "$INSTALL_DIR/enhanced-web.js" ] && command -v node >/dev/null 2>&1; then
        echo -e "${GREEN}✅ Web interface ready${NC}"
    else
        echo -e "${RED}❌ Web interface not ready${NC}"
    fi
    
    echo -e "${GREEN}✅ Installation test completed${NC}"
}

# Function to display completion message
display_completion() {
    print_step "🎉 DEPLOYMENT COMPLETED"
    
    cat << EOF

${GREEN}🎮 Game Server Management Tools Successfully Deployed! 🎮${NC}

${BOLD}Available Commands:${NC}
  ${CYAN}game-server status${NC}     - Check system status
  ${CYAN}game-server monitor${NC}    - Run monitoring dashboard  
  ${CYAN}game-server backup${NC}     - Create backup
  ${CYAN}game-server web${NC}        - Start web interface

${BOLD}Services:${NC}
  ${CYAN}Web Interface${NC}          - http://$(hostname -I | awk '{print $1}'):8080
  ${CYAN}Monitoring Timer${NC}       - Every 15 minutes
  ${CYAN}Daily Backups${NC}          - 2:00 AM daily
  ${CYAN}Status Checks${NC}          - 8:00 AM daily

${BOLD}Locations:${NC}
  ${CYAN}Tools${NC}                  - $INSTALL_DIR
  ${CYAN}Logs${NC}                   - $LOG_DIR
  ${CYAN}Backups${NC}                - $BACKUP_DIR
  ${CYAN}Config${NC}                 - $CONFIG_DIR

${BOLD}Next Steps:${NC}
1. Test the installation: ${CYAN}game-server status${NC}
2. Start web interface: ${CYAN}systemctl enable --now game-server-web${NC}
3. Enable monitoring: ${CYAN}systemctl enable --now game-server-monitor.timer${NC}
4. Configure notifications in ${CYAN}$CONFIG_DIR/game-server.conf${NC}

${YELLOW}⚠️ Important:${NC}
- Install the actual game server (Sunshine, CoinOps) for full functionality
- These tools provide monitoring and management for your game server
- Configure NTFY notifications for alerts and status updates

${BOLD}Support:${NC}
- Maintainer: ${CYAN}$ADMIN_EMAIL${NC}
- Version: ${CYAN}$SCRIPT_VERSION${NC}
- Logs: ${CYAN}tail -f $LOGFILE${NC}

${GREEN}🎮 Ready to manage your game server! 🎮${NC}

EOF

    log_message "Deployment completed successfully - version $SCRIPT_VERSION"
}

# Main execution
main() {
    echo -e "${CYAN}🎮 GAME SERVER STANDALONE DEPLOYMENT${NC}"
    echo -e "${CYAN}═══════════════════════════════════════════════════════${NC}"
    echo -e "Version: $SCRIPT_VERSION"
    echo -e "Maintainer: $ADMIN_EMAIL"
    echo -e "Time: $(date)"
    echo ""
    
    log_message "Starting game server standalone deployment - version $SCRIPT_VERSION"
    
    # Run deployment steps
    check_prerequisites
    install_dependencies
    create_directories
    install_monitoring
    install_backup
    install_status
    install_web_interface
    create_main_command
    create_systemd_services
    setup_cron_jobs
    create_configuration
    test_installation
    display_completion
    
    log_message "Game server deployment completed successfully"
}

# Handle command line arguments
case "${1:-}" in
    "install"|"deploy")
        main
        ;;
    "uninstall"|"remove")
        print_step "🗑️ UNINSTALLING GAME SERVER TOOLS"
        
        # Stop services
        systemctl stop game-server-web 2>/dev/null || true
        systemctl disable game-server-web 2>/dev/null || true
        systemctl stop game-server-monitor.timer 2>/dev/null || true
        systemctl disable game-server-monitor.timer 2>/dev/null || true
        
        # Remove files
        rm -rf "$INSTALL_DIR"
        rm -f "$BIN_DIR/game-server"
        rm -f "$SERVICE_DIR/game-server-"*
        rm -f "/etc/cron.d/game-server"
        
        # Reload systemd
        systemctl daemon-reload
        
        echo -e "${GREEN}✅ Game server tools uninstalled${NC}"
        ;;
    "help"|"-h"|"--help")
        echo "Game Server Standalone Deployment"
        echo ""
        echo "Usage: $0 [COMMAND]"
        echo ""
        echo "Commands:"
        echo "  install     Deploy game server management tools (default)"
        echo "  uninstall   Remove all installed components"
        echo "  help        Show this help message"
        echo ""
        echo "This script installs comprehensive management tools for game servers:"
        echo "- Monitoring dashboard with system metrics"
        echo "- Automated backup system for ROMs, saves, and configs"
        echo "- Status checking and health monitoring"
        echo "- Enhanced web interface with Prometheus metrics"
        echo "- Systemd services and automated tasks"
        echo ""
        ;;
    *)
        main
        ;;
esac